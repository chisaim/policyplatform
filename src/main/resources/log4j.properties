### Log4j配置 ###
### 与Spring结合需要在web.xml中指定此文件位置，并添加监听器 ###
#定义log4j的输出级别和输出目的地（目的地可以自定义名称，和后面的对应）
#[ level ] , appenderName1 , appenderName2
log4j.rootLogger=DEBUG,console,file

#-----------------------------------#
#1 定义日志输出目的地为控制台
log4j.appender.console = org.apache.log4j.ConsoleAppender
log4j.appender.console.Target = System.out
log4j.appender.console.Threshold=DEBUG
#自定义样式     
#%c 输出所属的类目，通常就是所在类的全名   
#%C 输出Logger所在类的名称，通常就是所在类的全名   
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，%d{ABSOLUTE}，%d{DATE}  
#%F 输出所在类的类名称，只有类名。  
#%l 输出语句所在的行数，包括类名+方法名+文件名+行数  
#%L 输出语句所在的行数，只输出数字  
#%m 输出代码中指定的讯息，如log(message)中的message  
#%M 输出方法名  
#%p 输出日志级别，即DEBUG，INFO，WARN，ERROR，FATAL  
#%r 输出自应用启动到输出该log信息耗费的毫秒数  
#%t 输出产生该日志事件的线程名  
#%n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”  
#%% 用来输出百分号“%”  
#log4j.appender.Linkin.layout.ConversionPattern=%n[%l%d{yy/MM/dd HH:mm:ss:SSS}][%C-%M] %m    
#log4j.appender.Linkin.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss}[%C]-[%p] %m%n     
#log4j.appender.Linkin.layout.ConversionPattern = %d{ABSOLUTE} %5p %t %c{2}:%L - %m%n  
log4j.appender.console.layout = org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=[%-5p]-[%F-%L]-%m%n
log4j.logger.org.apache=INFO
log4j.logger.org.apache.ibatis=ERROR

#-----------------------------------#
#2 文件大小到达指定尺寸的时候产生一个新的文件 
log4j.appender.file = org.apache.log4j.RollingFileAppender
#日志文件输出目录
log4j.appender.file.File=log/policyplatform.log
#定义文件最大大小
log4j.appender.file.MaxFileSize=10mb
###输出日志信息###
#最低级别
#log4j.appender.file.Threshold=ERROR
log4j.appender.file.Threshold=DEBUG
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=[%p][%d{yy-MM-dd}][%c]%m%n
#log4j.appender.file.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss.SSS}][%5p] [%F %L] || %m %n
 
#3 mybatis 显示SQL语句部分
log4j.logger.org.mybatis=DEBUG
log4j.logger.java.sql=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.ResultSet=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG